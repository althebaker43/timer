#ifndef TIMER_DRIVER
#define TIMER_DRIVER

#include <stdint.h>

/**
 * Timer context structure typedef
 */
typedef struct TimerInstance_struct TimerInstance;

/**
 * Enumeration of all possible timer states
 */
typedef enum TimerStatus_enum
{
  TIMER_STATUS_INVALID,
  TIMER_STATUS_STOPPED,
  TIMER_STATUS_RUNNING
} TimerStatus;

/**
 * Initializes the timer driver
 *
 * This only needs to be called once after system reset
 */
void InitTimers();

/**
 * Allocates a new timer context (if possible)
 *
 * \return Pointer to new context, or NULL if not created
 */
TimerInstance* CreateTimer();

/**
 * Destroys a given timer context
 */
void DestroyTimer(TimerInstance**);

/**
 * Destroys all timers in use
 *
 * \note All existing TimerInstance pointers are invalidated by this function
 */
void DestroyAllTimers();

/**
 * Provides the given timer's status
 *
 * \return Status of the given timer
 */
TimerStatus GetTimerStatus(TimerInstance*);

/**
 * Provides the given timer's system clock source enumerator
 */
uint8_t GetTimerClockSource(TimerInstance*);

/**
 * Provides the given timer's compare match value
 */
uint8_t GetTimerCompareMatch(TimerInstance*);

/**
 * Provides the given timer's number of compare matches per cycle
 *
 * For timers with cycle times that exceed the capabilities of the system's
 * hardware, an additional counter in user memory must be used to track the
 * number of compare matches generated by the timer module.
 *
 * \return Number of compare matches per cycle, or -1 if invalid instance is given
 */
uint8_t GetTimerCompareMatchesPerCycle(TimerInstance*);

/**
 * Starts the given timer, if not already running
 */
void StartTimer(TimerInstance*);

/**
 * Stops the given timer, if not already stopped
 */
void StopTimer(TimerInstance*);

/**
 * Sets the timer cycle time in milliseconds
 *
 * \return Nonzero if the timer cycle time was set, zero otherwise
 */
uint8_t SetTimerCycleTimeMilliSec(TimerInstance*, uint16_t);

/**
 * Sets the timer cycle time in seconds
 *
 * \return Nonzero if the timer cycle time was set, zero otherwise
 */
uint8_t SetTimerCycleTimeSec(TimerInstance*, uint8_t);

#endif /* TIMER_DRIVER */
