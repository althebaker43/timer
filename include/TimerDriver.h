#ifndef TIMER_DRIVER
#define TIMER_DRIVER

/**
 * \file TimerDriver.h
 *
 * Specification file for the timer driver
 */

/**
 * Timer context structure typedef
 */
typedef struct TimerInstance_struct TimerInstance;

/**
 * Typedef for timer cycle handler
 */
typedef void (*TimerCycleHandler)(void);

/**
 * Enumeration of all possible timer states
 */
typedef enum TimerStatus_enum
{
  TIMER_STATUS_INVALID,
  TIMER_STATUS_STOPPED,
  TIMER_STATUS_RUNNING
} TimerStatus;

/**
 * Initializes the timer driver
 *
 * This only needs to be called once after system reset
 */
void
InitTimers();

/**
 * Allocates a new timer context (if possible)
 *
 * \return Pointer to new context, or NULL if not created
 */
TimerInstance*
CreateTimer();

/**
 * Destroys a given timer context
 */
void
DestroyTimer(
    TimerInstance** instance  /**< Pointer to pointer to instance to be destroyed */
    );

/**
 * Destroys all timers in use
 *
 * \note All existing TimerInstance pointers are invalidated by this function
 */
void
DestroyAllTimers();

/**
 * Provides the given timer's status
 *
 * \return Status of the given timer
 */
TimerStatus
GetTimerStatus(
    TimerInstance*  instance  /**< Pointer to instance of timer to get status of */
    );

/**
 * Provides the given timer's system clock source enumerator
 */
unsigned int
GetTimerClockSource(
    TimerInstance*  instance  /**< Pointer to instance of timer to get source of */
    );

/**
 * Provides the given timer's compare match value
 */
unsigned int
GetTimerCompareMatch(
    TimerInstance*  instance  /**< Pointer to instance of timer to get match value of */
    );

/**
 * Provides the given timer's number of compare matches per cycle
 *
 * For timers with cycle times that exceed the capabilities of the system's
 * hardware, an additional counter in user memory must be used to track the
 * number of compare matches generated by the timer module.
 *
 * \return Number of compare matches per cycle, or -1 if invalid instance is given
 */
unsigned int
GetTimerCompareMatchesPerCycle(
    TimerInstance*  instance  /**< Pointer to instance of timer get matches-per-cycle of */
    );

/**
 * Starts the given timer, if not already running
 *
 * \return Nonzero if the timer was started, zero otherwise
 */
unsigned int
StartTimer(
    TimerInstance*  instance  /**< Pointer to instance of timer to start */
    );

/**
 * Stops the given timer, if not already stopped
 */
void
StopTimer(
    TimerInstance*  instance  /**< Pointer to instance of timer to  stop */
    );

/**
 * Sets the timer cycle time in milliseconds
 *
 * \return Nonzero if the timer cycle time was set, zero otherwise
 */
unsigned int
SetTimerCycleTimeMilliSec(
    TimerInstance*    instance,   /**< Pointer to instance of timer to set period of */
    unsigned int      numMilliSec /**< Number of milliseconds to set period to */
    );

/**
 * Sets the timer cycle time in seconds
 *
 * \return Nonzero if the timer cycle time was set, zero otherwise
 */
unsigned int
SetTimerCycleTimeSec(
    TimerInstance*      instance, /**< Pointer to instance of timer to set period of */
    unsigned short int  numSec    /**< Number of seconds to set period to */
    );

/**
 * Provides the compare output mode for a given timer
 *
 * \return Identifier of compare output mode of given timer and output
 */
unsigned int
GetTimerCompareOutputMode(
    TimerInstance*  instance, /**< Pointer to instance of timer to get mode of */
    unsigned int         output    /**< Identifier of output to get mode of */
    );

/**
 * Sets the compare output mode of a timer
 *
 * \return Nonzero if the timer output mode was set, zero otherwise
 */
unsigned int
SetTimerCompareOutputMode(
    TimerInstance*  instance, /**< Pointer to instance of timer to set mode of */
    unsigned int         output,   /**< Identifier of output to set mode of */
    unsigned int         mode      /**< Identifier of compare output mode to set to */
    );

/**
 * Provides the number of compare matches counted so far
 *
 * \note This gets reset to zero after every cycle
 */
unsigned int
GetNumTimerCompareMatches(
    TimerInstance*  instance  /**< Pointer to instance of timer to get number of compare matches from */
    );

/**
 * Provides the number of cycles counted so far
 */
unsigned int
GetNumTimerCycles(
    TimerInstance*  instance  /**< Pointer to instance of timer to get number of cycles from */
    );

/**
 * Provides the given timer's cycle completion handler
 */
TimerCycleHandler
GetTimerCycleHandler(
    TimerInstance*  instance  /**< Pointer to instance of timer to get cycle handler for */
    );

/**
 * Sets the given timer's cycle completion handler
 */
unsigned int
SetTimerCycleHandler(
    TimerInstance*    instance, /**< Pointer to instance of timer to set cycle handler for */
    TimerCycleHandler handler   /**< Handler call on each cycle completion */
    );

#endif /* TIMER_DRIVER */
